#14.3 多个连接

#前面讨论的服务器解决方案都是同步的：不能同时处理多个客户端的连接请求.
#如果连接的持续时间较长，比如完整的聊天会话，就需要能够同时处理多个连接.

#处理多个连接的主要方式有三种:分叉(forking),线程化和异步I/O.
#优缺点:分叉占用的资源较多,且在客户端很多时可伸缩性不佳(但只要客户端数量适中,
#分叉在现代UNIX和Linux系统中的效率很高，如果系统有多个CPU,效率就更高了);
#而线程化可能带来同步问题.

#14.3.1 使用 SocketServer 实现分叉和线程化

#14.3.2 使用select 和 poll 实现异步I/O

#使用分叉和线程化，当一个进程(线程)等待数据时,其它进程(线程)可继续处理其客户端.
#另一种做法是只处理当前正在通信的客户端,你甚至无需不断监听,只需监听后将客户端加入队列即可.
#这就是框架asyncore/asynchat 和 Twisted 采取的方法.这种功能的基石函数select或poll 都位于模块select中,
#其中poll的可伸缩性更高，但只有unix系统支持它(windows不支持).

