#第七章
#更加抽象

#Python被称为面向对象的语言
#本章将介绍如何创建对象，以及多态，封装，方法，特性，超类以及继承的概念.

#7.1 对象的魔力

#多态：意味着可以对不同类的对象使用相同的操作
#封装：对外部世界隐藏对象的工作细节
#继承：以通用的类为基础建立专门的类对象.

#多态和方法
#绑定到对象特性上面的函数被称为方法(method)

#多态的多种形式
#很多函数和运算符都是多态的--唯一能够毁掉多态的就是使用函数显式地检查类型,
#比如type,isinstance以及issubclass函数等

#7.1.2封装
#封装是指向程序中地其他部分隐藏对象的具体实现细节的原则

#封装和多态都是  抽象的原则  ，它们都会帮助处理程序组件而不用过多关心多余细节,就像函数做的一样

#封装并不等同于多态，多态可以让用户对于不知道是什么类（对象类型)的对象进行方法调用，而封装是可以不用关心对象
#是如何构建的而直接进行使用

#对象有它自己的状态（state），对象的状态由它的特性（比如名称)来描述,对象的方法可以改变它的特性，
#所以就像是将一大堆函数（方法）捆在一起，并且给予它们访问变量（特性）的权力，它们可以在函数调用之间保持保存的值。


#7.1.3 继承

#继承是指子类通过继承父类的形式，达到既能使用父类的特性和方法，也能拥有自己的特殊特性和额外方法的行为.

#7.2类和类型

#7.2.1 类到底是什么

#所有的对象都属于某一个类，称为类的实例.

#在面向对象程序设计中，子类的关系是隐式的，因为一个类的定义取决于它所支持的方法，
#类的所有实例都会包含这些方法，所以所有子类的所有实例都有这些方法。
#定义子类只是个定义更多（也有可能是重载已经存在的）的方法的过程。

