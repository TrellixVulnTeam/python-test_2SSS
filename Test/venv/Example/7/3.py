#7.3 一些关于面向对象设计的思考

#1.将属于一类的对象放在一起.如果一个函数操纵一个全局变量,那么两者最好都在类内作为特性和方法出现
#2.不要让对象过于亲密.方法应该只关心自己实例的特性,让其他实例管理自己的状态
#3.要小心继承,尤其时多重继承.继承机制有时有用，但也会在某些情况下让事情变得过于复杂，多继承难以使用，更难以调试
#4.简单就好，让你的方法小巧,一般来说，多数方法都应能在30秒内被读完(以及理解),尽量将代码行数控制在一页或者一屏之内.

#当考虑需要什么类以及类要有什么方法时，应当尝试下面的方法
#1.写下问题的描述,把所有名词，动词和形容词加下划线
#2.对于所有名词，用作可能的类
#3.对于所有动词，用作可能的方法
#4.对于所有形容词，用作可能的特性
#5.把所有方法和特性分配到类

#现在已经有了面向对象模型的草图了，还可以考虑类和对象之间的关系(比如继承和协作)以及它们的作用
#可以用以下步骤精炼模型
#1)写下(或者想象）一系列的使用实例,也就是程序应用的场景,试着包括所有的功能.
#2)一步步考虑每个使用实例,保证模型包括所有需要的东西，查漏补缺，步步修正，直到满意为止.

#7.4 小结

#对象
#对象包括特性和方法，特性只是作为对象的一部分的变量，方法则是存储在对象内的函数。
#(绑定）方法和其他函数的区别在于方法总是将对象作为自己的第一个参数，这个参数一般称为self

#类
#类代表对象的集合（或一类对象），每个对象（实例）都有一个类，类的主要任务是定义它的实例会用到的方法
#多态
#多态是实现将不同类型和类的对象进行同样对待的特性--不需要知道对象属于哪个类就能调用方法.
#封装
#对象可以将它们的内部状态隐藏(或封装)起来。在一些语言中(比如java），这意味着状态（特性）只对自己的方法可用
#在Python中，所有的特性都是公开可用的.
#继承
#一个类可以是一个或者多个类的子类,子类从超类继承所有方法，可以使用多个超类，这个特性可以用来组成功能的正交部分
#（没有任何联系)普通的实现方式是使用核心的超类和一个或者对各混合的超类
#接口和内省
#面向对象程序设计
#关于如何（或者说是否应该进行）面向对象设计有很多的观点，不管你持什么观点，
#完全理解这个问题，并且创建容易理解的设计是很重要的.